// Copyright (c) 2024, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:dart_simdjson/src/impl.dart';

export 'dart:typed_data' show Uint8List;
export 'package:dart_simdjson/src/annotation.dart' show FromJsonBytes;
export 'package:dart_simdjson/src/impl.dart'
    show
        DecodeBytes,
        DecodeBytesToList,
        RawFieldAccessors,
        ArrayToListHelpers,
        LayoutDescriptor,
        FieldType;

/// Extension type used to describe JSON schema.
///
/// This type is used together with [JsonFromBytes] annotation to
/// trigger `dart_simdjson` builder to generate:
///
/// * metadata describing how JSON bytes should be deserialized into a
/// structured native object ([NativeJsonObject]);
/// * accessors for reading deserialized data from that native object.
///
/// JSON schema is supplied as record type with named fields:
///
/// * each named field describes a field in a JSON object;
/// * non-nullable fields are considered required;
/// * nullable fields are considered optional;
/// * code generator supports fields of type:
///   * `int`, `String`, `double`, `bool`;
///   * other extension types with `@JsonFromBytes` on them;
///   * nullable variants of these types;
///   * lists of these types;
///
/// Example usage:
///
/// ```dart
/// @JsonFromBytes()
/// extension type User(Json<({String name, int? age, List<Title> titles})>) {}
///
/// @JsonFromBytes()
/// extension type Title(Json<({String id})>) {}
/// ```
///
/// To decode this object from `Uint8List` of JSON bytes:
///
/// ```
/// final user = const Decoder<User>().convert(bytes);
/// print('name: ${user.name}, age: ${a.age ?? 'Unknown'}');
/// for (var title in user.titles) {
///   print('  ${title.id}');
/// }
/// ```
///
/// Note: because all deserialized objects are represented as extension types
/// the type information is not reified. The runtime type of all deserialized
/// objects is simply `NativeJsonObject` and that does not carry around any
/// reflective information to identify original type or access a specific
/// field by name.
extension type Json<Schema extends Record>(NativeJsonObject json)
    implements NativeJsonObject {}

/// Marker type used to access `convert` method generated by [FromJsonBytes]:
///
/// ```dart
/// @JsonFromBytes()
/// extension type X(Json<({String id})>) {}
///
/// X x = const Decoder<X>().convert(bytes);
/// ```
final class Decoder<T> {
  const Decoder();
}
